(function(){describe("PropMap tests",function(){return beforeEach(function(){return angular.mock.module("google-maps.directives.api.models.parent"),inject(function(t){return function(o){return t.PropMap=o}}(this))}),it("should construct",function(){var t;return t=new this.PropMap,expect(null!=t).toEqual(!0)}),describe("PropMap method tests",function(){return beforeEach(function(){return this.propMap=new this.PropMap}),it("should have initial length 0",function(){return expect(this.propMap.length).toEqual(0)}),it("should return undefined initially",function(){return expect(this.propMap.get("foo")).toEqual(void 0)}),it("should return what is put",function(){return this.propMap.put("foo","bar"),expect(this.propMap.get("foo")).toEqual("bar")}),it("should remove and reflect length",function(){return this.propMap.put("foo","bar"),expect(this.propMap.length).toEqual(1),this.propMap.remove("foo"),expect(this.propMap.get("foo")).toEqual(void 0),expect(this.propMap.length).toEqual(0)}),it("should return all put values",function(){var t,o,p,e,r,u,n;for(this.propMap.put("foo","bar"),this.propMap.put("baz","biz"),e=this.propMap.values(),t=["bar","biz"],n=[],o=r=0,u=t.length;u>r;o=++r)p=t[o],n.push(expect(e[o]).toEqual(p));return n}),it("should return all put keys",function(){var t,o,p,e,r,u,n;for(this.propMap.put("foo","bar"),this.propMap.put("baz","biz"),e=this.propMap.keys(),t=["foo","baz"],n=[],o=r=0,u=t.length;u>r;o=++r)p=t[o],n.push(expect(e[o]).toEqual(p));return n})})})}).call(this);