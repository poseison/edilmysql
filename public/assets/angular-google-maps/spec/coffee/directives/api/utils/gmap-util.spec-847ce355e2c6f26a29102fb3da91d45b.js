(function(){describe("utils.gmap-util",function(){return beforeEach(function(){return module("google-maps.directives.api.utils"),module("google-maps.mocks"),inject(function(t){return function(e,o){return t.subject=e,t.gmap=new o,t.gmap.mockAPI(),t.gmap.mockMVCArray(),t.gmap.mockPoint(),t.gmap.mockLatLng(),t.gmap.mockLatLngBounds()}}(this))}),describe("should validate the path correctly",function(){return it("latlong",function(){var t;return t={longitude:45,latitude:-27},expect(this.subject.validatePath([t,t])).toEqual(!0),expect(this.subject.validatePath([t])).toEqual(!1)}),it("empty array",function(){return expect(this.subject.validatePath([])).toEqual(!1)}),it("array of invalid objects",function(){return expect(this.subject.validatePath([{},{}])).toEqual(!1)}),it("Polygon",function(){return expect(this.subject.validatePath({type:"Polygon"})).toEqual(!1),expect(this.subject.validatePath({type:"Polygon",coordinates:[function(){var t,e;for(e=[],t=1;4>=t;t++)e.push([1,2]);return e}()]})).toEqual(!0),expect(this.subject.validatePath({type:"Polygon",coordinates:[function(){var t,e;for(e=[],t=1;1>=t;t++)e.push([1,2]);return e}()]})).toEqual(!1)}),it("Polygon",function(){return expect(this.subject.validatePath({type:"LineString",coordinates:function(){var t,e;for(e=[],t=1;2>=t;t++)e.push([1,2]);return e}()})).toEqual(!0),expect(this.subject.validatePath({type:"LineString",coordinates:function(){var t,e;for(e=[],t=1;1>=t;t++)e.push([1,2]);return e}()})).toEqual(!1),expect(this.subject.validatePath({type:"LineString",coordinates:function(){var t,e;for(e=[],t=1;2>=t;t++)e.push([]);return e}()})).toEqual(!1)}),it("foo",function(){return expect(this.subject.validatePath({type:"foo",coordinates:[]})).toEqual(!1)})}),describe("should validate coordinates correctly",function(){return it("basic",function(){return expect(this.subject.validateCoords()).toEqual(!1),expect(this.subject.validateCoords([1,2])).toEqual(!0),expect(this.subject.validateCoords([])).toEqual(!1)}),it("type:Point",function(){return expect(this.subject.validateCoords({type:"Point",coordinates:[1,2]})).toEqual(!0),expect(this.subject.validateCoords({type:"Point",coordinates:[]})).toEqual(!1)}),it("type:foo, no lat lon",function(){return expect(this.subject.validateCoords({type:"foo",coordinates:[]})).toEqual(!1)}),it("type:foo, w lat lon",function(){return expect(this.subject.validateCoords({type:"foo",latitude:45,longitude:150})).toEqual(!0)})}),it("should evaluate truthiness correctly",function(){return expect(this.subject.isTrue(!0)).toEqual(!0),expect(this.subject.isTrue("true")).toEqual(!0),expect(this.subject.isTrue("1")).toEqual(!0),expect(this.subject.isTrue("y")).toEqual(!0),expect(this.subject.isTrue()).toEqual(!1),expect(this.subject.isTrue(null)).toEqual(!1)}),it("should evaluate falsiness correctly",function(){return expect(this.subject.isFalse("false")).toEqual(!0),expect(this.subject.isFalse("FALSE")).toEqual(!0),expect(this.subject.isFalse(0)).toEqual(!0),expect(this.subject.isFalse("n")).toEqual(!0),expect(this.subject.isFalse("N")).toEqual(!0),expect(this.subject.isFalse("no")).toEqual(!0),expect(this.subject.isFalse("NO")).toEqual(!0),expect(this.subject.isFalse(!1)).toEqual(!1)}),it("should convert path points correctly",function(){var t;return t={longitude:45,latitude:-27},expect(this.subject.convertPathPoints([]).getLength()).toEqual(0),expect(this.subject.convertPathPoints([t]).getLength()).toEqual(1),expect(this.subject.convertPathPoints({type:"Polygon",coordinates:[function(){var t,e;for(e=[],t=1;4>=t;t++)e.push([1,2]);return e}()]}).getLength()).toEqual(4),expect(this.subject.convertPathPoints({type:"LineString",coordinates:function(){var t,e;for(e=[],t=1;4>=t;t++)e.push([1,2]);return e}()}).getLength()).toEqual(4)}),it("should increase coverage",function(){var t;return t={longitude:45,latitude:-27},this.subject.getCoords(t),this.subject.getLabelPositionPoint("0 1"),this.subject.extendMapBounds({fitBounds:function(){return void 0}},[])}),it("(getLabelPositionPoint) should convert decimal coordinates separated by a space into a map Point object",function(){var t;return t=[{input:"22 0",expected:{x:22,y:0}},{input:"1 2",expected:{x:1,y:2}},{input:"1.0 2.3",expected:{x:1,y:2.3}},{input:"-1 -2",expected:{x:-1,y:-2}}],t.forEach(function(t){return function(e){var o;return o=t.subject.getLabelPositionPoint(e.input),expect(o.x).toEqual(e.expected.x),expect(o.y).toEqual(e.expected.y)}}(this))}),it("(getLabelPositionPoint) should ignore coordinate strings not following the format",function(){var t;return t=[" 1 2 ","a b","1,2"],t.forEach(function(t){return function(e){var o;return o=t.subject.getLabelPositionPoint(e.input)}}(this))}),it("should correctly fetch object values using dot-notation",function(){var t;return t={foo:{sea:"hawks"}},expect(this.subject.getPath(t,"foo.sea")).toEqual("hawks"),expect(this.subject.getPath(t,"foo.sea.birds")).toEqual(void 0),expect(this.subject.getPath(t,"boo.hoo")).toEqual(void 0)})})}).call(this);