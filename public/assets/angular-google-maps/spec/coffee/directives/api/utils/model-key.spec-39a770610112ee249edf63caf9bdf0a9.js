(function(){describe("ModelKey Tests",function(){return beforeEach(function(){return angular.mock.module("google-maps.directives.api.utils"),inject(function(e){return function(t,o){return e.scope=t.$new(),e.subject=new o(e.scope)}}(this))}),it("should eval model handle correctly",function(){var e;return e={key:"key",sub:{foo:"bar"}},expect(this.subject.evalModelHandle()).toEqual(void 0),expect(this.subject.evalModelHandle(e,"self")).toEqual(e),expect(this.subject.evalModelHandle(e,"key")).toEqual("key"),expect(this.subject.evalModelHandle(e,"foo")).toEqual(void 0),expect(this.subject.evalModelHandle(e,"sub.foo")).toEqual("bar")}),it("should properly compare models",function(){var e,t,o;return e={coords:{latitude:41,longitude:-27}},t={coords:{latitude:40,longitude:-27}},o={coords:{type:"Point",coordinates:[-27,40]}},expect(this.subject.modelKeyComparison).toThrow("No scope or parentScope set!"),this.scope.coords="coords",expect(this.subject.modelKeyComparison(e,e)).toEqual(!0),expect(this.subject.modelKeyComparison(e,t)).toEqual(!1),expect(this.subject.modelKeyComparison(t,o)).toEqual(!0)}),it("should properly set id key",function(){return expect(this.subject.idKey).toEqual(void 0),expect(this.subject.setIdKey(this.scope)).toEqual("id"),this.scope.idKey="foo",expect(this.subject.setIdKey(this.scope)).toEqual("foo")})})}).call(this);