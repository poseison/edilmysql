(function(){describe("MarkersParentModel - Clusterer Event Extensions",function(){return afterEach(function(){return self.markerModelsCluster=void 0}),beforeEach(function(){var e;return this.clusterTest={getMarkers:function(){return{values:function(){return[{key:1},{key:2}]}}}},this.index=0,this.clicked=!1,e=this,this.scope={icon:"icon.png",coords:{latitude:90,longitude:90},events:{click:function(t){return e.clicked=!0,e.gMarkerSetEvent=t}},clusterOptions:{},clusterEvents:{click:function(t,r){return e.markerModelsCluster=r},mouseout:function(t,r){return e.markerModelsCluster=r},mouseover:function(t,r){return e.markerModelsCluster=r},crap:function(){return e.markerModelsCluster="crap"}},doCluster:"true",models:[]},angular.module("mockModule",["google-maps","google-maps.mocks"]).value("map",document.gMap).value("element",{}).value("attrs",{click:!0}).value("model",{}).value("scope",this.scope),module("mockModule"),inject(function(e){return function(t){return e.gmap=new t(!1),e.gmap.mockEvent()}}(this)),inject(function(e){return function(t,r,n,s,o){var u,c;return c=t.$new(),u=function(e){return e()},e.scope=_.extend(e.scope,c),e.scope.options={animation:google.maps.Animation.BOUNCE},e.testCtor=o,e.fireListener=window.google.maps.event.fireListener,e.subject=new e.testCtor(e.scope,r,n,s,u),e.subject}}(this))}),it("constructor exist",function(){return expect(this.testCtor).toBeDefined()}),it("can be created",function(){return expect(null!=this.subject).toBeDefined()}),describe("clusterEvents",function(){return describe("basic event handling",function(){return describe("is fired",function(){return describe("mapped extension",function(){return it("click - ",function(){return this.subject.scope.markerModels.put(1,{model:"test1"}),this.subject.scope.markerModels.put(2,{model:"test2"}),this.subject.clusterInternalOptions.click(this.clusterTest),expect(_.all(this.markerModelsCluster,function(e){return function(t,r){return t===e.subject.scope.markerModels[r+1].model}}(this))).toBeTruthy()}),it("mouseout - ",function(){return this.subject.scope.markerModels.put(1,{model:"test1"}),this.subject.scope.markerModels.put(2,{model:"test2"}),this.subject.clusterInternalOptions.mouseout(this.clusterTest),expect(_.all(this.markerModelsCluster,function(e){return function(t,r){return t===e.subject.scope.markerModels[r+1].model}}(this))).toBeTruthy()}),it("mouseover - ",function(){return this.subject.scope.markerModels.put(1,{model:"test1"}),this.subject.scope.markerModels.put(2,{model:"test2"}),this.subject.clusterInternalOptions.mouseover(this.clusterTest),expect(_.all(this.markerModelsCluster,function(e){return function(t,r){return t===e.subject.scope.markerModels[r+1].model}}(this))).toBeTruthy()})}),describe("some legacy event",function(){return function(){return it("crap - ",function(){return this.subject.gMarkerManager.opt_events.crap(),expect(this.markerModelsCluster).toBe("crap")})}}(this))}),describe("not fired",function(){return it("click - ",function(){})})})})})}).call(this);