(function(){describe("MarkerChildModel",function(){return beforeEach(function(){return this.index=0,this.model={icon:"icon.png",coords:{latitude:90,longitude:90},options:{animation:google.maps.Animation.BOUNCE}},this.iconKey="icon",this.coordsKey="coords",this.optionsKey="options",angular.module("mockModule",[]).value("index",this.index).value("gMap",document.gMap).value("defaults",{}).value("model",this.model).value("gMarkerManager",new directives.api.managers.MarkerManager(document.gMap,void 0,void 0)).value("doClick",function(){}).value("model",{}).controller("childModel",directives.api.models.child.MarkerChildModel),angular.mock.module("mockModule"),inject(function(e){return function(t,o,i){var n;return n=o.$new(),n.click=function(){},n.icon=e.iconKey,n.coords=e.coordsKey,n.options=e.optionsKey,e.subject=i("childModel",{parentScope:n})}}(this))}),it("can be created",function(){return expect(void 0!==this.subject).toEqual(!0),expect(this.subject.index).toEqual(this.index)}),it("parentScope keys are set correctly",function(){return expect(this.subject.iconKey).toEqual(this.iconKey),expect(this.subject.coordsKey).toEqual(this.coordsKey),expect(this.subject.optionsKey).toEqual(this.optionsKey)}),describe("evalModelHandle()",function(){return it("scope values are equal to the model values by key",function(){return expect(this.subject.__proto__.evalModelHandle(this.model,this.iconKey)).toEqual(this.model.icon),expect(this.subject.__proto__.evalModelHandle(this.model,this.coordsKey)).toEqual(this.model.coords),expect(this.subject.__proto__.evalModelHandle(this.model,this.optionsKey)).toEqual(this.model.options)}),it("updates an existing models properties via watch, icon",function(){return this.model.icon="test.png",expect(this.subject.__proto__.evalModelHandle(this.model,this.iconKey)).toEqual(this.model.icon)}),it("updates an existing models properties via watch, coords",function(){return this.model.coords.latitude=91,expect(this.subject.__proto__.evalModelHandle(this.model,this.coordsKey)).toEqual(this.model.coords)}),it("updates an existing models properties via watch, options",function(){return this.model.options="options2",expect(this.subject.__proto__.evalModelHandle(this.model,this.optionsKey)).toEqual(this.model.options)}),it("undefined model returns undefined",function(){return expect(this.subject.__proto__.evalModelHandle(void 0,this.optionsKey)).toEqual(void 0)}),it("modelKey of self returns model",function(){return expect(this.subject.__proto__.evalModelHandle(this.model,"self")).toEqual(this.model)}),it("modelKey of undefined returns undefined",function(){return expect(this.subject.__proto__.evalModelHandle(this.model,void 0)).toEqual(void 0)})}),describe("maybeSetScopeValue()",function(){return beforeEach(function(){return this.gSetterCalled=!1,this.isInit=!1,this.gSetter=function(e){return function(){return e.gSetterCalled=!0}}(this)}),it("oldModel undefined, isInit false - changes scope's models value, and calls gSetter ",function(){var e;return e={icon:"someIcon"},this.subject.myScope.icon="junk",this.subject.maybeSetScopeValue("icon",e,void 0,this.iconKey,this.subject.__proto__.evalModelHandle,this.isInit,this.gSetter),expect(this.gSetterCalled).toEqual(!0),expect(this.subject.myScope.icon).toEqual(e.icon)})}),describe("destroy()",function(){return it("wipes internal scope",function(){return this.subject.destroy(),expect(this.subject.myScope.$$destroyed).toEqual(!0)}),it("wipes gMarker",function(){return this.subject.destroy(),expect(this.subject.gMarker).toEqual(void 0),expect(this.subject.gMarkerManager.gMarkers.length).toEqual(0)})})})}).call(this);