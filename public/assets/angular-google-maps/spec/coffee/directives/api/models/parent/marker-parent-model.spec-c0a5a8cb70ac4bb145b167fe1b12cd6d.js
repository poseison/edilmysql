(function(){describe("MarkerParentModel",function(){return afterEach(function(){return window.google.maps=this.gMapsTemp}),beforeEach(function(){var e;return this.gMapsTemp=window.google.maps,this.index=0,this.clicked=!1,e=this,this.scope={icon:"icon.png",coords:{latitude:90,longitude:90},options:{animation:google.maps.Animation.BOUNCE},events:{click:function(t){return e.clicked=!0,e.gMarkerSetEvent=t}}},this.googleMapListeners=[],window.google.maps.event.addListener=function(e){return function(t,n,i){var o,r;return o=_.find(e.googleMapListeners,function(e){return e.obj===t}),null==o?(r={},r.obj=t,r.events={},r.events[n]=i,e.googleMapListeners.push(r)):o.events[n]=i}}(this),this.fireListener=function(e){return function(t,n){var i;return i=_.find(e.googleMapListeners,function(e){return e.obj===t}),null!=i?i.events[n](i.obj):void 0}}(this),angular.module("mockModule",[]).value("mapCtrl",{getMap:function(){return document.gMap}}).value("element",{}).value("attrs",{}).value("model",{}).value("scope",this.scope).controller("subject",function(e){return function(t,n,i,o){return e.subject=new directives.api.models.parent.MarkerParentModel(t,n,i={click:!0},o,function(e){return e()})}}(this)),angular.mock.module("mockModule"),inject(function(e){return function(t,n,i,o){var r;return directives.api.utils.Logger.logger=i,r=n.$new(),e.scope=_.extend(e.scope,r),o("subject",{scope:e.scope})}}(this)),this.subject.setEvents(this,this.scope)}),it("constructor exist",function(){var e;return e=null!=directives.api.models.parent.MarkerParentModel,expect(e).toEqual(!0)}),it("can be created",function(){return expect(null!=this.subject).toEqual(!0)}),describe("validateScope",function(){return it("returns fals with scope undefined",function(){return expect(this.subject.validateScope(void 0)).toEqual(!1)}),it("returns fals with scope.coords undefined",function(){return expect(this.subject.validateScope({coords:void 0})).toEqual(!1)}),it("returns fals with scope.coords,latitude undefined",function(){return expect(this.subject.validateScope({coords:{latitude:void 0,longitude:{}}})).toEqual(!0)}),it("returns fals with scope.coords.longtitude undefined",function(){return expect(this.subject.validateScope({coords:{latitude:{},longitude:void 0}})).toEqual(!0)}),it("fake googleMapListeners can be fired - to prove mocke of google.maps.event.addListener works",function(){var e;return e=!1,window.google.maps.event.addListener(this,"junk",function(){return function(){return e=!0}}(this)),this.fireListener(this,"junk"),expect(e).toBeTruthy()}),it("googleMapListeners is fired through MarkerParentModel's scope.events",function(){return expect(this.clicked).toBeFalsy(),this.fireListener(this,"click"),expect(this.clicked).toBeTruthy()}),it("googleMapListeners is fired through MarkerParentModel's scope.events with an optional marker",function(){return expect(this.gMarkerSetEvent).toBeUndefined(),this.fireListener(this.subject.scope.gMarker,"click"),expect(this.gMarkerSetEvent).toBeDefined(),expect(this.gMarkerSetEvent.position).toBeDefined()})})})}).call(this);